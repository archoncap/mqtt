<?php

declare(strict_types=1);

namespace tests\unreal4u\MQTT\Mocks;

use unreal4u\MQTT\Internals\ClientInterface;
use unreal4u\MQTT\Internals\ProtocolBase;
use unreal4u\MQTT\Internals\ReadableContent;
use unreal4u\MQTT\Internals\ReadableContentInterface;

class ReadableBaseMock extends ProtocolBase implements ReadableContentInterface
{
    use ReadableContent;

    /**
     * All classes must implement how to handle the object filling
     *
     * @param string $rawMQTTHeaders
     * @param ClientInterface $client
     *
     * @return ReadableContentInterface
     */
    public function fillObject(string $rawMQTTHeaders, ClientInterface $client): ReadableContentInterface
    {
        return $this;
    }

    /**
     * Returns the origin control packet that will issue this type of object
     *
     * This strange construct is better explained with an example:
     * a ConnAck will always come from a Connect packet.
     * a SubAck will always come from a Subscribe packet.
     * a PingResp will always come from a PingReq packet.
     *
     * However, given the nature of the MQTT protocol, not every package will arrive in the same order that they were
     * issued. This will happen most often with retained messages, QoS levels >0 and Subscribe packets: the SubAck
     * packet will arrive just in between the traffic generated by a QoS level 2 packet, disrupting the flow.
     *
     * This is why each ReadableContent must return the origin packet identifier that may issue this type of packet, in
     * order to identify where it might have come from.
     *
     * @return int
     */
    public function getOriginControlPacket(): int
    {
        return 0;
    }
}
